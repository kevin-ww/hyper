kind: Service
apiVersion: v1
metadata:
  name: network01-peer4
spec:
  type: NodePort
  selector:
    app: network01-peer4
  ports:
    - protocol: TCP
      port: 7051
      nodePort: 31081
      name: grpc-port
    - protocol: TCP
      port: 7053
      nodePort: 31083
      name: event-port

---
kind: Service
apiVersion: v1
metadata:
  name: network01-peer1
spec:
  type: NodePort
  selector:
    app: network01-peer1
  ports:
    - protocol: TCP
      port: 7051
      nodePort: 31051
      name: grpc-port
    - protocol: TCP
      port: 7053
      nodePort: 31053
      name: event-port

---
kind: Service
apiVersion: v1
metadata:
  name: network01-peer2
spec:
  type: NodePort
  selector:
    app: network01-peer2
  ports:
    - protocol: TCP
      port: 7051
      nodePort: 31061
      name: grpc-port
    - protocol: TCP
      port: 7053
      nodePort: 31063
      name: event-port

---
kind: Service
apiVersion: v1
metadata:
  name: network01-peer3
spec:
  type: NodePort
  selector:
    app: network01-peer3
  ports:
    - protocol: TCP
      port: 7051
      nodePort: 31071
      name: grpc-port
    - protocol: TCP
      port: 7053
      nodePort: 31073
      name: event-port

---
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: network01-peer4-deployment
  labels:
    app: network01-peer4
spec:
  replicas: 1
  selector:
    matchLabels:
      app: network01-peer4
  template:
    metadata:
      labels:
        app: network01-peer4
    spec:
      containers:
        - name: network01-couchdb4
          image: registry.cn-hangzhou.aliyuncs.com/cos-solution/fabric-couchdb:x86_64-1.0.0
          imagePullPolicy: "IfNotPresent"
          ports:
            - containerPort: 5984
              name: couchdb-port
          env:
            - name: CORE_LOGGING_LEVEL
              value: "DEBUG"
          volumeMounts:
            - name: couchdb-data
              mountPath: /opt/couchdb/data
        - name: network01-peer4
          image: registry.cn-hangzhou.aliyuncs.com/cos-solution/fabric-peer:x86_64-1.0.0
          imagePullPolicy: "IfNotPresent"
          ports:
            - containerPort: 7051
              name: grpc-port
            - containerPort: 7053
              name: event-port
          command: ["peer"]
          args: ["node", "start", "--peer-defaultchain=false"]
          env:
            - name: GODEBUG
              value: "netdns=go"
            - name: CORE_VM_ENDPOINT
              value: "unix:///host/var/run/docker.sock"
            # Tthe following setting starts chaincode containers on the same
            # network as the peers
            # https://docs.docker.com/compose/networking/
            - name: CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE
              value: "bridge"
            - name: CORE_LOGGING_LEVEL
              value: "DEBUG"
            - name: CORE_NEXT
              value: "true"
            - name: CORE_PEER_TLS_ENABLED
              value: "true"
            - name: CORE_PEER_ID
              value: "network01-peer4"
            - name: CORE_PEER_LOCALMSPID
              value: "Org2MSP"
            - name: CORE_PEER_ENDORSER_ENABLED
              value: "true"
            - name: CORE_PEER_GOSSIP_USELEADERELECTION
              value: "true"
            - name: CORE_PEER_GOSSIP_ORGLEADER
              value: "false"
            # Unlike swarm, ADDRESSAUTODETECT must be set to true on k8s
            - name: CORE_PEER_ADDRESSAUTODETECT
              value: "true"
            - name: CORE_PEER_ADDRESS
              value: "network01-peer4:7051"
            - name: CORE_PEER_GOSSIP_EXTERNALENDPOINT
              value: "network01-peer4:7051"
            # Only non-anchor peer need to set CORE_PEER_GOSSIP_BOOTSTRAP pointing to anchor peer
            - name: CORE_PEER_GOSSIP_BOOTSTRAP
              value: "network01-peer3:7051"
            # Chaincode listen address is suggested for production 
            # - name: CORE_PEER_CHAINCODELISTENADDRESS
            #   value: "network01-peer4:7052"
            # The following setting skips the gossip handshake since we are
            # are not doing mutual TLS
            - name: CORE_PEER_GOSSIP_SKIPHANDSHAKE
              value: "true"
            - name: CORE_PEER_PROFILE_ENABLED
              value: "true"
            # Re-specify the data path for peer
            - name: CORE_PEER_FILESYSTEMPATH
              value: "/var/hyperledger/production/"
            - name: CORE_PEER_MSPCONFIGPATH
              value: "/var/hyperledger/production/msp"
            - name: CORE_PEER_TLS_CERT_FILE
              value: "/var/hyperledger/production/tls/server.crt"
            - name: CORE_PEER_TLS_KEY_FILE
              value: "/var/hyperledger/production/tls/server.key"
            - name: CORE_PEER_TLS_ROOTCERT_FILE
              value: "/var/hyperledger/production/tls/ca.crt"
            - name: CORE_PEER_TLS_SERVERHOSTOVERRIDE
              value: "network01-peer4"
            - name: CORE_LEDGER_STATE_STATEDATABASE
              value: "CouchDB"
            # Unlike swarm, for k8s, we use localhost to access couchdb
            - name: CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS
              value: "localhost:5984"
          volumeMounts:
            - name: peer-data
              mountPath: /var/hyperledger/production
            - name: docker-sock
              mountPath: /host/var/run/docker.sock
      initContainers:
        - name: check-orderer
          image: registry.cn-hangzhou.aliyuncs.com/cos-solution/fabric-tools:x86_64-1.0.0
          imagePullPolicy: "IfNotPresent"
          command: ['sh', '-c']
          args: ['until nc -w 3 network01-orderer1 7050; do echo waiting for orderer1; sleep 3; done; until nc -w 3 network01-orderer2 7050; do echo waiting for orderer2; sleep 3; done; until nc -w 3 network01-orderer3 7050; do echo waiting for orderer3; sleep 3; done; ']
      volumes:
        - name: couchdb-data
          hostPath:
            path: "/data/fabric/network01/network01-couchdb4"
        - name: peer-data
          hostPath:
            path: "/data/fabric/network01/network01-peer4"
        - name: docker-sock
          hostPath:
            path: /var/run/docker.sock

---
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: network01-peer2-deployment
  labels:
    app: network01-peer2
spec:
  replicas: 1
  selector:
    matchLabels:
      app: network01-peer2
  template:
    metadata:
      labels:
        app: network01-peer2
    spec:
      containers:
        - name: network01-couchdb2
          image: registry.cn-hangzhou.aliyuncs.com/cos-solution/fabric-couchdb:x86_64-1.0.0
          imagePullPolicy: "IfNotPresent"
          ports:
            - containerPort: 5984
              name: couchdb-port
          env:
            - name: CORE_LOGGING_LEVEL
              value: "DEBUG"
          volumeMounts:
            - name: couchdb-data
              mountPath: /opt/couchdb/data
        - name: network01-peer2
          image: registry.cn-hangzhou.aliyuncs.com/cos-solution/fabric-peer:x86_64-1.0.0
          imagePullPolicy: "IfNotPresent"
          ports:
            - containerPort: 7051
              name: grpc-port
            - containerPort: 7053
              name: event-port
          command: ["peer"]
          args: ["node", "start", "--peer-defaultchain=false"]
          env:
            - name: GODEBUG
              value: "netdns=go"
            - name: CORE_VM_ENDPOINT
              value: "unix:///host/var/run/docker.sock"
            # Tthe following setting starts chaincode containers on the same
            # network as the peers
            # https://docs.docker.com/compose/networking/
            - name: CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE
              value: "bridge"
            - name: CORE_LOGGING_LEVEL
              value: "DEBUG"
            - name: CORE_NEXT
              value: "true"
            - name: CORE_PEER_TLS_ENABLED
              value: "true"
            - name: CORE_PEER_ID
              value: "network01-peer2"
            - name: CORE_PEER_LOCALMSPID
              value: "Org1MSP"
            - name: CORE_PEER_ENDORSER_ENABLED
              value: "true"
            - name: CORE_PEER_GOSSIP_USELEADERELECTION
              value: "true"
            - name: CORE_PEER_GOSSIP_ORGLEADER
              value: "false"
            # Unlike swarm, ADDRESSAUTODETECT must be set to true on k8s
            - name: CORE_PEER_ADDRESSAUTODETECT
              value: "true"
            - name: CORE_PEER_ADDRESS
              value: "network01-peer2:7051"
            - name: CORE_PEER_GOSSIP_EXTERNALENDPOINT
              value: "network01-peer2:7051"
            # Only non-anchor peer need to set CORE_PEER_GOSSIP_BOOTSTRAP pointing to anchor peer
            - name: CORE_PEER_GOSSIP_BOOTSTRAP
              value: "network01-peer1:7051"
            # Chaincode listen address is suggested for production 
            # - name: CORE_PEER_CHAINCODELISTENADDRESS
            #   value: "network01-peer2:7052"
            # The following setting skips the gossip handshake since we are
            # are not doing mutual TLS
            - name: CORE_PEER_GOSSIP_SKIPHANDSHAKE
              value: "true"
            - name: CORE_PEER_PROFILE_ENABLED
              value: "true"
            # Re-specify the data path for peer
            - name: CORE_PEER_FILESYSTEMPATH
              value: "/var/hyperledger/production/"
            - name: CORE_PEER_MSPCONFIGPATH
              value: "/var/hyperledger/production/msp"
            - name: CORE_PEER_TLS_CERT_FILE
              value: "/var/hyperledger/production/tls/server.crt"
            - name: CORE_PEER_TLS_KEY_FILE
              value: "/var/hyperledger/production/tls/server.key"
            - name: CORE_PEER_TLS_ROOTCERT_FILE
              value: "/var/hyperledger/production/tls/ca.crt"
            - name: CORE_PEER_TLS_SERVERHOSTOVERRIDE
              value: "network01-peer2"
            - name: CORE_LEDGER_STATE_STATEDATABASE
              value: "CouchDB"
            # Unlike swarm, for k8s, we use localhost to access couchdb
            - name: CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS
              value: "localhost:5984"
          volumeMounts:
            - name: peer-data
              mountPath: /var/hyperledger/production
            - name: docker-sock
              mountPath: /host/var/run/docker.sock
      initContainers:
        - name: check-orderer
          image: registry.cn-hangzhou.aliyuncs.com/cos-solution/fabric-tools:x86_64-1.0.0
          imagePullPolicy: "IfNotPresent"
          command: ['sh', '-c']
          args: ['until nc -w 3 network01-orderer1 7050; do echo waiting for orderer1; sleep 3; done; until nc -w 3 network01-orderer2 7050; do echo waiting for orderer2; sleep 3; done; until nc -w 3 network01-orderer3 7050; do echo waiting for orderer3; sleep 3; done; ']
      volumes:
        - name: couchdb-data
          hostPath:
            path: "/data/fabric/network01/network01-couchdb2"
        - name: peer-data
          hostPath:
            path: "/data/fabric/network01/network01-peer2"
        - name: docker-sock
          hostPath:
            path: /var/run/docker.sock

---
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: network01-peer3-deployment
  labels:
    app: network01-peer3
spec:
  replicas: 1
  selector:
    matchLabels:
      app: network01-peer3
  template:
    metadata:
      labels:
        app: network01-peer3
    spec:
      containers:
        - name: network01-couchdb3
          image: registry.cn-hangzhou.aliyuncs.com/cos-solution/fabric-couchdb:x86_64-1.0.0
          imagePullPolicy: "IfNotPresent"
          ports:
            - containerPort: 5984
              name: couchdb-port
          env:
            - name: CORE_LOGGING_LEVEL
              value: "DEBUG"
          volumeMounts:
            - name: couchdb-data
              mountPath: /opt/couchdb/data
        - name: network01-peer3
          image: registry.cn-hangzhou.aliyuncs.com/cos-solution/fabric-peer:x86_64-1.0.0
          imagePullPolicy: "IfNotPresent"
          ports:
            - containerPort: 7051
              name: grpc-port
            - containerPort: 7053
              name: event-port
          command: ["peer"]
          args: ["node", "start", "--peer-defaultchain=false"]
          env:
            - name: GODEBUG
              value: "netdns=go"
            - name: CORE_VM_ENDPOINT
              value: "unix:///host/var/run/docker.sock"
            # Tthe following setting starts chaincode containers on the same
            # network as the peers
            # https://docs.docker.com/compose/networking/
            - name: CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE
              value: "bridge"
            - name: CORE_LOGGING_LEVEL
              value: "DEBUG"
            - name: CORE_NEXT
              value: "true"
            - name: CORE_PEER_TLS_ENABLED
              value: "true"
            - name: CORE_PEER_ID
              value: "network01-peer3"
            - name: CORE_PEER_LOCALMSPID
              value: "Org2MSP"
            - name: CORE_PEER_ENDORSER_ENABLED
              value: "true"
            - name: CORE_PEER_GOSSIP_USELEADERELECTION
              value: "true"
            - name: CORE_PEER_GOSSIP_ORGLEADER
              value: "false"
            # Unlike swarm, ADDRESSAUTODETECT must be set to true on k8s
            - name: CORE_PEER_ADDRESSAUTODETECT
              value: "true"
            - name: CORE_PEER_ADDRESS
              value: "network01-peer3:7051"
            - name: CORE_PEER_GOSSIP_EXTERNALENDPOINT
              value: "network01-peer3:7051"
            # Chaincode listen address is suggested for production 
            # - name: CORE_PEER_CHAINCODELISTENADDRESS
            #   value: "network01-peer3:7052"
            # The following setting skips the gossip handshake since we are
            # are not doing mutual TLS
            - name: CORE_PEER_GOSSIP_SKIPHANDSHAKE
              value: "true"
            - name: CORE_PEER_PROFILE_ENABLED
              value: "true"
            # Re-specify the data path for peer
            - name: CORE_PEER_FILESYSTEMPATH
              value: "/var/hyperledger/production/"
            - name: CORE_PEER_MSPCONFIGPATH
              value: "/var/hyperledger/production/msp"
            - name: CORE_PEER_TLS_CERT_FILE
              value: "/var/hyperledger/production/tls/server.crt"
            - name: CORE_PEER_TLS_KEY_FILE
              value: "/var/hyperledger/production/tls/server.key"
            - name: CORE_PEER_TLS_ROOTCERT_FILE
              value: "/var/hyperledger/production/tls/ca.crt"
            - name: CORE_PEER_TLS_SERVERHOSTOVERRIDE
              value: "network01-peer3"
            - name: CORE_LEDGER_STATE_STATEDATABASE
              value: "CouchDB"
            # Unlike swarm, for k8s, we use localhost to access couchdb
            - name: CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS
              value: "localhost:5984"
          volumeMounts:
            - name: peer-data
              mountPath: /var/hyperledger/production
            - name: docker-sock
              mountPath: /host/var/run/docker.sock
      initContainers:
        - name: check-orderer
          image: registry.cn-hangzhou.aliyuncs.com/cos-solution/fabric-tools:x86_64-1.0.0
          imagePullPolicy: "IfNotPresent"
          command: ['sh', '-c']
          args: ['until nc -w 3 network01-orderer1 7050; do echo waiting for orderer1; sleep 3; done; until nc -w 3 network01-orderer2 7050; do echo waiting for orderer2; sleep 3; done; until nc -w 3 network01-orderer3 7050; do echo waiting for orderer3; sleep 3; done; ']
      volumes:
        - name: couchdb-data
          hostPath:
            path: "/data/fabric/network01/network01-couchdb3"
        - name: peer-data
          hostPath:
            path: "/data/fabric/network01/network01-peer3"
        - name: docker-sock
          hostPath:
            path: /var/run/docker.sock

---
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: network01-peer1-deployment
  labels:
    app: network01-peer1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: network01-peer1
  template:
    metadata:
      labels:
        app: network01-peer1
    spec:
      containers:
        - name: network01-couchdb1
          image: registry.cn-hangzhou.aliyuncs.com/cos-solution/fabric-couchdb:x86_64-1.0.0
          imagePullPolicy: "IfNotPresent"
          ports:
            - containerPort: 5984
              name: couchdb-port
          env:
            - name: CORE_LOGGING_LEVEL
              value: "DEBUG"
          volumeMounts:
            - name: couchdb-data
              mountPath: /opt/couchdb/data
        - name: network01-peer1
          image: registry.cn-hangzhou.aliyuncs.com/cos-solution/fabric-peer:x86_64-1.0.0
          imagePullPolicy: "IfNotPresent"
          ports:
            - containerPort: 7051
              name: grpc-port
            - containerPort: 7053
              name: event-port
          command: ["peer"]
          args: ["node", "start", "--peer-defaultchain=false"]
          env:
            - name: GODEBUG
              value: "netdns=go"
            - name: CORE_VM_ENDPOINT
              value: "unix:///host/var/run/docker.sock"
            # Tthe following setting starts chaincode containers on the same
            # network as the peers
            # https://docs.docker.com/compose/networking/
            - name: CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE
              value: "bridge"
            - name: CORE_LOGGING_LEVEL
              value: "DEBUG"
            - name: CORE_NEXT
              value: "true"
            - name: CORE_PEER_TLS_ENABLED
              value: "true"
            - name: CORE_PEER_ID
              value: "network01-peer1"
            - name: CORE_PEER_LOCALMSPID
              value: "Org1MSP"
            - name: CORE_PEER_ENDORSER_ENABLED
              value: "true"
            - name: CORE_PEER_GOSSIP_USELEADERELECTION
              value: "true"
            - name: CORE_PEER_GOSSIP_ORGLEADER
              value: "false"
            # Unlike swarm, ADDRESSAUTODETECT must be set to true on k8s
            - name: CORE_PEER_ADDRESSAUTODETECT
              value: "true"
            - name: CORE_PEER_ADDRESS
              value: "network01-peer1:7051"
            - name: CORE_PEER_GOSSIP_EXTERNALENDPOINT
              value: "network01-peer1:7051"
            # Chaincode listen address is suggested for production 
            # - name: CORE_PEER_CHAINCODELISTENADDRESS
            #   value: "network01-peer1:7052"
            # The following setting skips the gossip handshake since we are
            # are not doing mutual TLS
            - name: CORE_PEER_GOSSIP_SKIPHANDSHAKE
              value: "true"
            - name: CORE_PEER_PROFILE_ENABLED
              value: "true"
            # Re-specify the data path for peer
            - name: CORE_PEER_FILESYSTEMPATH
              value: "/var/hyperledger/production/"
            - name: CORE_PEER_MSPCONFIGPATH
              value: "/var/hyperledger/production/msp"
            - name: CORE_PEER_TLS_CERT_FILE
              value: "/var/hyperledger/production/tls/server.crt"
            - name: CORE_PEER_TLS_KEY_FILE
              value: "/var/hyperledger/production/tls/server.key"
            - name: CORE_PEER_TLS_ROOTCERT_FILE
              value: "/var/hyperledger/production/tls/ca.crt"
            - name: CORE_PEER_TLS_SERVERHOSTOVERRIDE
              value: "network01-peer1"
            - name: CORE_LEDGER_STATE_STATEDATABASE
              value: "CouchDB"
            # Unlike swarm, for k8s, we use localhost to access couchdb
            - name: CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS
              value: "localhost:5984"
          volumeMounts:
            - name: peer-data
              mountPath: /var/hyperledger/production
            - name: docker-sock
              mountPath: /host/var/run/docker.sock
      initContainers:
        - name: check-orderer
          image: registry.cn-hangzhou.aliyuncs.com/cos-solution/fabric-tools:x86_64-1.0.0
          imagePullPolicy: "IfNotPresent"
          command: ['sh', '-c']
          args: ['until nc -w 3 network01-orderer1 7050; do echo waiting for orderer1; sleep 3; done; until nc -w 3 network01-orderer2 7050; do echo waiting for orderer2; sleep 3; done; until nc -w 3 network01-orderer3 7050; do echo waiting for orderer3; sleep 3; done; ']
      volumes:
        - name: couchdb-data
          hostPath:
            path: "/data/fabric/network01/network01-couchdb1"
        - name: peer-data
          hostPath:
            path: "/data/fabric/network01/network01-peer1"
        - name: docker-sock
          hostPath:
            path: /var/run/docker.sock

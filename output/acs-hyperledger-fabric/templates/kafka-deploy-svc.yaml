kind: Service
apiVersion: v1
metadata:
  name: network01-kafka3
spec:
  # Use headless service to tolerate k8s env which disables hairpin mode
  clusterIP: None
  selector:
    app: network01-kafka3
  ports:
    - protocol: TCP
      port: 9094
      name: kafka-port

---
kind: Service
apiVersion: v1
metadata:
  name: network01-kafka4
spec:
  # Use headless service to tolerate k8s env which disables hairpin mode
  clusterIP: None
  selector:
    app: network01-kafka4
  ports:
    - protocol: TCP
      port: 9095
      name: kafka-port

---
kind: Service
apiVersion: v1
metadata:
  name: network01-kafka1
spec:
  # Use headless service to tolerate k8s env which disables hairpin mode
  clusterIP: None
  selector:
    app: network01-kafka1
  ports:
    - protocol: TCP
      port: 9092
      name: kafka-port

---
kind: Service
apiVersion: v1
metadata:
  name: network01-kafka2
spec:
  # Use headless service to tolerate k8s env which disables hairpin mode
  clusterIP: None
  selector:
    app: network01-kafka2
  ports:
    - protocol: TCP
      port: 9093
      name: kafka-port

---
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: network01-kafka4-deployment
  labels:
    app: network01-kafka4
spec:
  replicas: 1
  selector:
    matchLabels:
      app: network01-kafka4
  template:
    metadata:
      labels:
        app: network01-kafka4
    spec:
      containers:
        - name: network01-kafka4
          image: registry.cn-hangzhou.aliyuncs.com/cos-solution/fabric-kafka:x86_64-1.0.0
          imagePullPolicy: "IfNotPresent"
          ports:
          - containerPort: 9095
            name: kafka-port
          env:
            - name: KAFKA_PORT
              value: "9095"
            - name: KAFKA_LISTENERS
              value: "PLAINTEXT://0.0.0.0:9095"
            - name: KAFKA_ADVERTISED_PORT
              value: "9095"
            - name: KAFKA_BROKER_ID
              value: "-1"
            - name: KAFKA_LOG_DIRS
              value: "/kafka-data"
            - name: KAFKA_ADVERTISED_HOST_NAME
              value: "network01-kafka4"
            - name: KAFKA_ZOOKEEPER_CONNECT
              value: "network01-zookeeper1:2181,network01-zookeeper2:2181,network01-zookeeper3:2181"
            - name: KAFKA_DELETE_TOPIC_ENABLE
              value: "true"
            - name: KAFKA_MESSAGE_MAX_BYTES
              value: "103809024"
            - name: KAFKA_REPLICA_FETCH_MAX_BYTES
              value: "103809024"
            - name: KAFKA_UNCLEAN_LEADER_ELECTION_ENABLE
              value: "false"
            - name: KAFKA_DEFAULT_REPLICATION_FACTOR
              value: "3"
            - name: KAFKA_MIN_INSYNC_REPLICAS
              value: "2"
          volumeMounts:
            - name: data
              mountPath: /kafka-data
      initContainers:
        - name: check-zookeeper
          image: registry.cn-shenzhen.aliyuncs.com/cos-solution/fabric-tools:x86_64-1.0.0
          imagePullPolicy: "IfNotPresent"
          command: ['sh', '-c']
          args: ['sleep 5; until echo stat | nc -w 3 network01-zookeeper1 2181; do echo waiting for network01-zookeeper1; sleep 3; done; until echo stat | nc -w 3 network01-zookeeper2 2181; do echo waiting for network01-zookeeper2; sleep 3; done; until echo stat | nc -w 3 network01-zookeeper3 2181; do echo waiting for network01-zookeeper3; sleep 3; done; sleep 5;']
      volumes:
        - name: data
          hostPath:
            path: /data/fabric/network01/network01-kafka4

---
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: network01-kafka2-deployment
  labels:
    app: network01-kafka2
spec:
  replicas: 1
  selector:
    matchLabels:
      app: network01-kafka2
  template:
    metadata:
      labels:
        app: network01-kafka2
    spec:
      containers:
        - name: network01-kafka2
          image: registry.cn-hangzhou.aliyuncs.com/cos-solution/fabric-kafka:x86_64-1.0.0
          imagePullPolicy: "IfNotPresent"
          ports:
          - containerPort: 9093
            name: kafka-port
          env:
            - name: KAFKA_PORT
              value: "9093"
            - name: KAFKA_LISTENERS
              value: "PLAINTEXT://0.0.0.0:9093"
            - name: KAFKA_ADVERTISED_PORT
              value: "9093"
            - name: KAFKA_BROKER_ID
              value: "-1"
            - name: KAFKA_LOG_DIRS
              value: "/kafka-data"
            - name: KAFKA_ADVERTISED_HOST_NAME
              value: "network01-kafka2"
            - name: KAFKA_ZOOKEEPER_CONNECT
              value: "network01-zookeeper1:2181,network01-zookeeper2:2181,network01-zookeeper3:2181"
            - name: KAFKA_DELETE_TOPIC_ENABLE
              value: "true"
            - name: KAFKA_MESSAGE_MAX_BYTES
              value: "103809024"
            - name: KAFKA_REPLICA_FETCH_MAX_BYTES
              value: "103809024"
            - name: KAFKA_UNCLEAN_LEADER_ELECTION_ENABLE
              value: "false"
            - name: KAFKA_DEFAULT_REPLICATION_FACTOR
              value: "3"
            - name: KAFKA_MIN_INSYNC_REPLICAS
              value: "2"
          volumeMounts:
            - name: data
              mountPath: /kafka-data
      initContainers:
        - name: check-zookeeper
          image: registry.cn-shenzhen.aliyuncs.com/cos-solution/fabric-tools:x86_64-1.0.0
          imagePullPolicy: "IfNotPresent"
          command: ['sh', '-c']
          args: ['sleep 5; until echo stat | nc -w 3 network01-zookeeper1 2181; do echo waiting for network01-zookeeper1; sleep 3; done; until echo stat | nc -w 3 network01-zookeeper2 2181; do echo waiting for network01-zookeeper2; sleep 3; done; until echo stat | nc -w 3 network01-zookeeper3 2181; do echo waiting for network01-zookeeper3; sleep 3; done; sleep 5;']
      volumes:
        - name: data
          hostPath:
            path: /data/fabric/network01/network01-kafka2

---
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: network01-kafka3-deployment
  labels:
    app: network01-kafka3
spec:
  replicas: 1
  selector:
    matchLabels:
      app: network01-kafka3
  template:
    metadata:
      labels:
        app: network01-kafka3
    spec:
      containers:
        - name: network01-kafka3
          image: registry.cn-hangzhou.aliyuncs.com/cos-solution/fabric-kafka:x86_64-1.0.0
          imagePullPolicy: "IfNotPresent"
          ports:
          - containerPort: 9094
            name: kafka-port
          env:
            - name: KAFKA_PORT
              value: "9094"
            - name: KAFKA_LISTENERS
              value: "PLAINTEXT://0.0.0.0:9094"
            - name: KAFKA_ADVERTISED_PORT
              value: "9094"
            - name: KAFKA_BROKER_ID
              value: "-1"
            - name: KAFKA_LOG_DIRS
              value: "/kafka-data"
            - name: KAFKA_ADVERTISED_HOST_NAME
              value: "network01-kafka3"
            - name: KAFKA_ZOOKEEPER_CONNECT
              value: "network01-zookeeper1:2181,network01-zookeeper2:2181,network01-zookeeper3:2181"
            - name: KAFKA_DELETE_TOPIC_ENABLE
              value: "true"
            - name: KAFKA_MESSAGE_MAX_BYTES
              value: "103809024"
            - name: KAFKA_REPLICA_FETCH_MAX_BYTES
              value: "103809024"
            - name: KAFKA_UNCLEAN_LEADER_ELECTION_ENABLE
              value: "false"
            - name: KAFKA_DEFAULT_REPLICATION_FACTOR
              value: "3"
            - name: KAFKA_MIN_INSYNC_REPLICAS
              value: "2"
          volumeMounts:
            - name: data
              mountPath: /kafka-data
      initContainers:
        - name: check-zookeeper
          image: registry.cn-shenzhen.aliyuncs.com/cos-solution/fabric-tools:x86_64-1.0.0
          imagePullPolicy: "IfNotPresent"
          command: ['sh', '-c']
          args: ['sleep 5; until echo stat | nc -w 3 network01-zookeeper1 2181; do echo waiting for network01-zookeeper1; sleep 3; done; until echo stat | nc -w 3 network01-zookeeper2 2181; do echo waiting for network01-zookeeper2; sleep 3; done; until echo stat | nc -w 3 network01-zookeeper3 2181; do echo waiting for network01-zookeeper3; sleep 3; done; sleep 5;']
      volumes:
        - name: data
          hostPath:
            path: /data/fabric/network01/network01-kafka3

---
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: network01-kafka1-deployment
  labels:
    app: network01-kafka1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: network01-kafka1
  template:
    metadata:
      labels:
        app: network01-kafka1
    spec:
      containers:
        - name: network01-kafka1
          image: registry.cn-hangzhou.aliyuncs.com/cos-solution/fabric-kafka:x86_64-1.0.0
          imagePullPolicy: "IfNotPresent"
          ports:
          - containerPort: 9092
            name: kafka-port
          env:
            - name: KAFKA_PORT
              value: "9092"
            - name: KAFKA_LISTENERS
              value: "PLAINTEXT://0.0.0.0:9092"
            - name: KAFKA_ADVERTISED_PORT
              value: "9092"
            - name: KAFKA_BROKER_ID
              value: "-1"
            - name: KAFKA_LOG_DIRS
              value: "/kafka-data"
            - name: KAFKA_ADVERTISED_HOST_NAME
              value: "network01-kafka1"
            - name: KAFKA_ZOOKEEPER_CONNECT
              value: "network01-zookeeper1:2181,network01-zookeeper2:2181,network01-zookeeper3:2181"
            - name: KAFKA_DELETE_TOPIC_ENABLE
              value: "true"
            - name: KAFKA_MESSAGE_MAX_BYTES
              value: "103809024"
            - name: KAFKA_REPLICA_FETCH_MAX_BYTES
              value: "103809024"
            - name: KAFKA_UNCLEAN_LEADER_ELECTION_ENABLE
              value: "false"
            - name: KAFKA_DEFAULT_REPLICATION_FACTOR
              value: "3"
            - name: KAFKA_MIN_INSYNC_REPLICAS
              value: "2"
          volumeMounts:
            - name: data
              mountPath: /kafka-data
      initContainers:
        - name: check-zookeeper
          image: registry.cn-shenzhen.aliyuncs.com/cos-solution/fabric-tools:x86_64-1.0.0
          imagePullPolicy: "IfNotPresent"
          command: ['sh', '-c']
          args: ['sleep 5; until echo stat | nc -w 3 network01-zookeeper1 2181; do echo waiting for network01-zookeeper1; sleep 3; done; until echo stat | nc -w 3 network01-zookeeper2 2181; do echo waiting for network01-zookeeper2; sleep 3; done; until echo stat | nc -w 3 network01-zookeeper3 2181; do echo waiting for network01-zookeeper3; sleep 3; done; sleep 5;']
      volumes:
        - name: data
          hostPath:
            path: /data/fabric/network01/network01-kafka1
